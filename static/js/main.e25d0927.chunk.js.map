{"version":3,"sources":["config/services.js","store/cryptoSlice.js","components/coinLists.js","components/home.js","components/singleCrypto.js","components/subNav.js","components/header.js","App.js","reportWebVitals.js","store/store.js","index.js"],"names":["options","method","param","url","headers","cryptoSlice","createSlice","name","initialState","cryptoData","reducers","addCryptos","state","action","payload","cryptoCoins","cryptoActions","actions","useStyles","makeStyles","root","maxWidth","media","height","MediaCard","pageNumber","currentItem","useSelector","cryptos","data","classes","useState","currentPage","setCurrentPage","itemsPerPage","pages","undefined","i","Math","ceil","coins","length","push","map","num","id","onClick","e","preventDefault","target","handlePageNumber","className","parseInt","indexOfLastItem","indexOfFirstItem","slice","el","graphData","labels","Array","history","keys","datasets","label","responsive","fill","lineTension","backgroundColor","color","pointRadius","pointBorderColor","padding","borderWidth","scales","xAxis","gridLines","display","yAxis","item","xs","sm","avatar","style","src","iconUrl","alt","symbol","width","title","to","pathname","coinId","size","subheader","slug","gutterBottom","variant","component","Number","price","toLocaleString","currency","base","change","marketCap","volume","circulatingSupply","text","fontSize","legend","position","theme","flexGrow","margin","FullWidthGrid","container","spacing","flexDirection","paper","textAlign","palette","secondary","SingleCrypto","coin","high","low","useLocation","prices","find","min","max","rank","type","links","href","rel","marginBottom","marginTop","parseFloat","toFixed","totalSupply","SubNav","cryptoSummary","stats","limit","totalExchanges","totalMarketCap","total24hVolume","sign","marginLeft","Header","App","dispatch","useDispatch","useEffect","axios","request","services","then","response","catch","error","console","basename","process","path","exact","Home","Coin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","cryptoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e25d0927.chunk.js","sourcesContent":["\nconst options = {\n    method: 'GET',\n    param: 'coins',\n    url: 'https://coinranking1.p.rapidapi.com/coins',\n    headers: {\n      'x-rapidapi-key': '74a217fafcmsh976e97a31530a44p1f4bd1jsne0efc121be88',\n      'x-rapidapi-host': 'coinranking1.p.rapidapi.com'\n    }\n  };\n\nexport default options","import {createSlice} from '@reduxjs/toolkit'\n\n// initialize the state\n\nconst initialState = {\n    cryptoData: {}\n}\n\nconst cryptoSlice = createSlice({\n    name: 'cyptos',\n    initialState: initialState,\n    reducers: {\n        addCryptos(state, action){\n            state.cryptoData = action.payload.cryptoCoins\n            // console.log(state.cryptoData)\n        }\n    }\n})\n\nexport default cryptoSlice.reducer \nexport const cryptoActions = cryptoSlice.actions","import {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {useSelector} from 'react-redux'\nimport {Link} from \"react-router-dom\";\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Avatar from '@material-ui/core/Avatar';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport {Line} from 'react-chartjs-2';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nfunction MediaCard() {\n\n  const cryptoCoins = useSelector(state => state.cryptos.cryptoData.data)\n  const classes = useStyles();\n  \n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage, setItemsPerPage] = useState(8)\n\n\n  // change the CurrentPage\n  const handlePageNumber = (e) => {\n    e.preventDefault()\n    setCurrentPage(e.target.id)\n  }\n\n  // get the total number of pages\n  const pages = []\n  let pageNumber,\n      currentItem\n\n  if(cryptoCoins !== undefined){\n    for(let i = 1; i <= Math.ceil(cryptoCoins.coins.length/itemsPerPage); i++){\n      pages.push(i)\n    }\n  \n\n  // items to be displayed\n   pageNumber = pages.map(num => <li \n                                    key={num} \n                                    id={num} \n                                    onClick={(e) => handlePageNumber(e)}\n                                    className={parseInt(currentPage) === parseInt(num) ? 'active': null}\n                                    > {num} </li>)\n\n  // get the number of items in the page\n  const indexOfLastItem = currentPage*itemsPerPage\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage\n  currentItem = cryptoCoins.coins.slice(indexOfFirstItem, indexOfLastItem)\n  }\n\n\n  return (\n    <>\n    \n    {!cryptoCoins && (<div className=\"spinner\"><h1>Loading...</h1></div>)}\n      {cryptoCoins && (currentItem.map(el => {\n\n        // displaying the graph\n       const graphData = {\n        labels: [...Array(el.history.length).keys()],\n        datasets: [\n          {\n            label: `${el.name} Coin Chart`,\n            responsive: true,\n            fill: false,\n            lineTension: 0.5,\n            backgroundColor: el.color,\n            pointRadius: 0,\n            pointBorderColor: el.color,\n            padding: 0,\n            borderWidth: 2,\n            data: el.history,\n            scales: {\n              xAxis: [{\n                 gridLines: {\n                    display: false\n                 }\n              }],\n              yAxis: [{\n                 gridLines: {\n                    display: false\n                 }\n              }]\n         }\n          }\n        ]\n      }\n       \n      return(\n          \n        <Grid item xs={6} sm={3} key={el.id}>\n          <Card className={classes.root} >\n            <CardHeader\n              avatar={\n                <Avatar aria-label=\"recipe\" className={classes.avatar} style={{backgroundColor: 'white'}}>\n                  <img src={el.iconUrl} alt={el.symbol} style={{width: `40px`, height: '40px'}}/>\n                </Avatar>\n              }\n              title={<Link to={{\n                pathname: `/currency/${el.name}`,\n                state: {coinId: el.id}\n              }} size=\"small\" color=\"#0000ee\">{el.name}</Link>}\n              subheader={el.slug}\n            />\n                \n            <CardActionArea>\n              <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"div\">\n                  <div className=\"coinInfo\">\n                    <p className=\"price\" sm={6}>\n                      <span>Price</span> <span>{(Number(el.price)).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoCoins.base.symbol,\n                      })}</span>\n                    </p>\n                    <p className={el.change > 0 ? \"data-increase increase\" : \"data-decrease decrease\"}><small>{el.change}%</small></p>\n                  </div>\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\" >\n                  <div className=\"data\">\n                    <p className=\"coin-data\" sm={6}>\n                      <span>Market Cap</span> <span>{(el.marketCap).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoCoins.base.symbol,\n                      })}</span>\n                    </p>\n                    <p className=\"coin-data\" >\n                      <span>Volume <span>(24h)</span></span>  <span>{(el.volume).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoCoins.base.symbol,\n                      })}</span>\n                    </p>\n                    <p className=\"coin-data\">\n                      <span>Circulating Supply</span> <span>{(Number(el.circulatingSupply)).toLocaleString('en-US')} {el.symbol}</span>\n                    </p>\n                  </div>\n                  <section className=\"history\">\n                    <Line\n                      data={graphData}\n                      options={{\n                        title:{\n                          display:true,\n                          text:'Average Rainfall per month',\n                          fontSize:20\n                        },\n                        legend:{\n                          display:true,\n                          position:'right'\n                        }\n                      }}\n                    />\n                  </section>\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n            <CardActions>\n              <Link to={{\n                  pathname: `/currency/${el.name}`,\n                  state: {coinId: el.id}\n                }} size=\"small\" color=\"primary\">Learn More</Link>\n            </CardActions>\n          </Card>\n        </Grid>\n      )\n      }))}\n      {cryptoCoins &&  <ul className=\"pageNumbers\">{pageNumber}</ul>}\n\n    </>\n  );\n}\n\nexport default MediaCard","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Coins from './coinLists'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    margin: '15px'\n  }\n}));\n\nexport default function FullWidthGrid() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n          <Coins/>\n      </Grid>\n    </div>\n  );\n}\n","import {useSelector} from 'react-redux'\nimport { useLocation } from 'react-router'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport {Line} from 'react-chartjs-2';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexDirection: 'column',\n    flexGrow: 1,\n    margin: '15px'\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n\n\nexport default function SingleCrypto() {\n  const classes = useStyles();\n\n   const location = useLocation()\n   const coinId = location.state.coinId\n  \n  const cryptoCoins = useSelector(state => state.cryptos.cryptoData.data)\n\n  // get SingleCoin\n  let coin,\n      graphData,\n      high,\n      desc,\n      low;\n\n  if (cryptoCoins !== undefined){\n    coin = cryptoCoins.coins.find(({id}) => id === coinId)\n\n    \n    const prices = coin.history.map(el => Number(el))\n    low = (Math.min(...prices).toLocaleString('en-US', {style: 'currency',currency: 'USD'}))\n    high = (Math.max(...prices).toLocaleString('en-US', {style: 'currency',currency: 'USD'}))\n\n    graphData = {\n      labels: [...Array(coin.history.length).keys()],\n      datasets: [\n        {\n          label: `${coin.name} Coin Chart`,\n          responsive: true,\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: coin.color,\n          pointRadius: 0,\n          pointBorderColor: coin.color,\n          padding: 0,\n          borderWidth: 2,\n          data: coin.history\n        }\n      ]\n    }\n    \n\n  }\n \n \n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        {coin && (<> \n          <Grid item xs={5}>\n            <section>\n              <div className=\"coin-head\">\n                <Avatar aria-label=\"recipe\" className={classes.avatar} style={{backgroundColor: 'white'}}>\n                  <img src={coin.iconUrl} alt={coin.symbol} style={{width: `50px`, height: '50px'}}/>\n                </Avatar>\n                <div className=\"single-coin-names\">\n                  <h1><strong>{coin.name}</strong></h1>\n                  <h5>{coin.symbol}</h5>\n                </div>\n              </div>\n              \n              <div className=\"rank-type\">\n                <h4>Rank #{coin.rank}</h4>\n                <h4>{coin.type}</h4>\n              </div>\n\n              <div >\n                <ul className=\"links\">\n                  {coin.links.map(el => {\n                    return (\n                      <li key={el.name}>\n                      <a href={el.url} target=\"_blank\" rel=\"noReferrer\">{el.name}</a>\n                    </li>\n                    )\n                  })}\n                </ul>\n\n              </div>\n            </section>\n          </Grid>\n\n          <Grid item xs={7}>\n            <section>\n              <div>\n                <p style={{marginBottom: '0'}}><small>{coin.name} Price ({coin.symbol})</small></p>\n                <div className=\"coin-price\">\n                  <h1 style={{marginTop: '0'}}>{(Number(coin.price)).toLocaleString('en-US', {\n                          style: 'currency',\n                          currency: 'USD',\n                        })}\n                  </h1>\n                  <h1 className={coin.change > 0 ? \"increase\" : \"decrease\"}>{coin.change}%</h1>\n                </div>\n                <div className=\"low-high\">\n                  <p><span>Low: <span><strong>{low}</strong></span></span></p>\n                  <p><span>High: <span><strong>{high}</strong></span></span></p>\n                </div>\n                \n              </div>\n\n            <div>\n              <h1>{coin.symbol} Price Statistics</h1>\n              <div className=\"coin-statistics\">\n\n                <div className=\"coin-stats-value\">\n                  <p><small>Market Cap</small></p>\n                  <p className=\"figures\"><small><strong>{(coin.marketCap).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoCoins.base.symbol,\n                      })}</strong></small></p>\n                </div>\n\n                <div className=\"coin-stats-value\">\n                  <p><small>Volume 24h</small></p>\n                  <p className=\"figures\">\n                    <small>\n                      <strong>{(coin.volume).toLocaleString('en-US', {\n                          style: 'currency',\n                          currency: cryptoCoins.base.symbol,\n                        })}\n                      </strong>\n                    </small>\n                  </p>\n                  <p><small>Volume / Market Cap</small></p>\n                  <p className=\"figures\"><small><strong>{parseFloat((coin.volume/coin.marketCap).toFixed(5))}</strong></small></p>\n                </div>\n\n                <div className=\"coin-stats-value\">\n                  <p><small>Circulating Supply</small></p>\n                  <p className=\"figures\">\n                    <small>\n                      <strong>{(coin.volume).toLocaleString('en-US')} {coin.symbol}</strong>\n                    </small>\n                  </p>\n                  <p><small>Total Supply</small></p>\n                  <p className=\"figures\"><small><strong>{(coin.totalSupply).toLocaleString('en-US')}</strong></small></p>\n                </div>\n              </div>\n            </div>\n            </section>\n          </Grid>\n          <section className=\"other-data\" >\n            <div className=\"coin-graph\">\n              <Line\n                      data={graphData}\n                      options={{\n                        title:{\n                          display:true,\n                          text:'Average Rainfall per month',\n                          fontSize:20\n                        },\n                        legend:{\n                          display:true,\n                          position:'right'\n                        }\n                      }}\n                    />\n            </div>\n            <div className=\"description\">\n            </div>\n          </section>\n        </>)}\n      </Grid>\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","\nimport React from 'react';\nimport {useSelector} from 'react-redux'\n\n\n\nexport default function SubNav() {\n\n    // get the coin to retrieve cumulative data\n    const cryptoSummary = useSelector(state => state.cryptos.cryptoData.data)\n\n    return (\n        <div className=\"sub-nav\">\n            {!cryptoSummary && (<small></small>)}\n            { cryptoSummary && (<div className=\"stats\">\n                    <p>\n                        <span>Cryptos: </span>\n                        <span className=\"stat-data\">{cryptoSummary.stats.limit}</span>\n                    </p>\n                    <p>\n                        <span>Exchanges: </span>\n                        <span className=\"stat-data\">{cryptoSummary.stats.totalExchanges}</span>\n                    </p>\n                    <p>\n                        <span>Market Cap: </span>\n                        <span className=\"stat-data\">{(cryptoSummary.stats.totalMarketCap).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoSummary.stats.base,\n                      })}</span>\n                    </p>\n                    <p>\n                        <span>24h Vol: </span>\n                        <span className=\"stat-data\">{(cryptoSummary.stats.total24hVolume).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoSummary.stats.base,\n                      })}</span>\n                    </p>\n                    <p>\n                        <span className=\"sign\">{cryptoSummary.base.sign}</span>\n                        <span><strong>{cryptoSummary.base.symbol}</strong></span>\n                    </p>\n                </div>)\n            }\n\n      </div>\n    );\n}\n","\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Link} from \"react-router-dom\";\nimport Typography from '@material-ui/core/Typography';\nimport SubNav from './subNav'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > * + *': {\n      marginLeft: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <header>\n      <SubNav/>\n      <nav>\n        <Typography className={classes.root}>\n        <Link to={{\n                pathname: '/',\n                }} size=\"small\" color=\"primary\">Home</Link>\n        </Typography>\n\n      </nav>\n    </header>\n      \n  );\n}\n","import axios from 'axios'\nimport {useEffect} from 'react'\nimport {useDispatch} from 'react-redux';\nimport { BrowserRouter, Route, Switch} from 'react-router-dom'\nimport services from './config/services'\nimport {cryptoActions} from './store/cryptoSlice'\nimport Home from './components/home'\nimport Coin from './components/singleCrypto'\nimport Header from './components/header'\nimport './App.css';\n\nfunction App() {\n\n  const dispatch = useDispatch()\n  \n  useEffect(() => {\n    axios.request(services).then(function (response) {\n      dispatch(cryptoActions.addCryptos({\n        cryptoCoins: response.data\n      }))\n\n    }).catch(function (error) {\n      console.error(error);\n    });\n  })\n  \n\n  return (\n    <>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Header/>\n      <Switch>\n        <Route path=\"/\"  exact component={Home}/>\n        <Route path=\"/currency/\"  component={Coin} />\n      </Switch>\n    </BrowserRouter>\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {configureStore} from \"@reduxjs/toolkit\"\n\nimport cryptoReducer from \"./cryptoSlice\"\n\nconst store = configureStore({\n    reducer: {\n        cryptos: cryptoReducer\n    }\n})\n\n\n\nexport default store;","import React from 'react';\nimport {Provider} from 'react-redux'\nimport {BrowserRouter} from 'react-router-dom'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}><App/></Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}