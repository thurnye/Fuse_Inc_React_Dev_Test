{"version":3,"sources":["components/coinLists.js","components/home.js","components/singleCrypto.js","store/cryptoSlice.js","components/subNav.js","components/header.js","App.js","reportWebVitals.js","store/store.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","media","height","MediaCard","cryptoCoins","useSelector","state","cryptos","cryptoData","data","classes","useState","currentPage","setCurrentPage","itemsPerPage","console","log","pageNumber","currentItem","pages","undefined","i","Math","ceil","coins","length","push","map","num","id","onClick","e","preventDefault","target","handlePageNumber","className","parseInt","indexOfLastItem","indexOfFirstItem","slice","el","graphData","labels","Array","history","keys","datasets","label","name","responsive","fill","lineTension","backgroundColor","color","pointRadius","pointBorderColor","padding","borderWidth","scales","xAxis","gridLines","display","yAxis","item","xs","sm","avatar","style","src","iconUrl","alt","symbol","width","title","to","pathname","coinId","size","subheader","slug","gutterBottom","variant","component","Number","price","toLocaleString","currency","base","change","marketCap","volume","circulatingSupply","options","text","fontSize","legend","position","theme","flexGrow","margin","FullWidthGrid","container","spacing","flexDirection","paper","textAlign","palette","secondary","SingleCrypto","coin","high","low","useLocation","prices","find","min","max","rank","type","links","href","url","rel","marginBottom","marginTop","parseFloat","toFixed","totalSupply","cryptoSlice","createSlice","initialState","reducers","addCryptos","action","payload","cryptoActions","actions","SubNav","cryptoSummary","stats","limit","totalExchanges","totalMarketCap","total24hVolume","sign","marginLeft","Header","App","dispatch","useDispatch","method","param","headers","useEffect","axios","request","then","response","catch","error","path","exact","Home","Coin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","cryptoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44abcfb7.chunk.js","sourcesContent":["import {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {useSelector} from 'react-redux'\nimport {Link} from \"react-router-dom\";\n// import { withRouter } from \"react-router\";\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Avatar from '@material-ui/core/Avatar';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport {Line} from 'react-chartjs-2';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nfunction MediaCard() {\n\n  const cryptoCoins = useSelector(state => state.cryptos.cryptoData.data)\n  const classes = useStyles();\n  \n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage, setItemsPerPage] = useState(8)\n\n  console.log(cryptoCoins)\n\n  // change the CurrentPage\n  const handlePageNumber = (e) => {\n    e.preventDefault()\n    setCurrentPage(e.target.id)\n  }\n\n  // get the total number of pages\n  const pages = []\n  let pageNumber,\n      currentItem\n\n  if(cryptoCoins !== undefined){\n    for(let i = 1; i <= Math.ceil(cryptoCoins.coins.length/itemsPerPage); i++){\n      pages.push(i)\n    }\n  \n\n  // items to be displayed\n   pageNumber = pages.map(num => <li \n                                    key={num} \n                                    id={num} \n                                    onClick={(e) => handlePageNumber(e)}\n                                    className={parseInt(currentPage) === parseInt(num) ? 'active': null}\n                                    > {num} </li>)\n\n  // get the number of items in the page\n  const indexOfLastItem = currentPage*itemsPerPage\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage\n  currentItem = cryptoCoins.coins.slice(indexOfFirstItem, indexOfLastItem)\n  }\n\n\n  return (\n    <>\n    \n    {!cryptoCoins && (<h1>Loading...</h1>)}\n      {cryptoCoins && (currentItem.map(el => {\n\n        // displaying the graph\n       const graphData = {\n        labels: [...Array(el.history.length).keys()],\n        datasets: [\n          {\n            label: `${el.name} Coin Chart`,\n            responsive: true,\n            fill: false,\n            lineTension: 0.5,\n            backgroundColor: el.color,\n            pointRadius: 0,\n            pointBorderColor: el.color,\n            padding: 0,\n            borderWidth: 2,\n            data: el.history,\n            scales: {\n              xAxis: [{\n                 gridLines: {\n                    display: false\n                 }\n              }],\n              yAxis: [{\n                 gridLines: {\n                    display: false\n                 }\n              }]\n         }\n          }\n        ]\n      }\n       \n      return(\n          \n        <Grid item xs={6} sm={3} key={el.id}>\n          <Card className={classes.root} >\n            <CardHeader\n              avatar={\n                <Avatar aria-label=\"recipe\" className={classes.avatar} style={{backgroundColor: 'white'}}>\n                  <img src={el.iconUrl} alt={el.symbol} style={{width: `40px`, height: '40px'}}/>\n                </Avatar>\n              }\n              title={<Link to={{\n                pathname: `/currency/${el.name}`,\n                state: {coinId: el.id}\n              }} size=\"small\" color=\"#0000ee\">{el.name}</Link>}\n              subheader={el.slug}\n            />\n                \n            <CardActionArea>\n              <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"div\">\n                  <div className=\"coinInfo\">\n                    <p className=\"price\" sm={6}>\n                      <span>Price</span> <span>{(Number(el.price)).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoCoins.base.symbol,\n                      })}</span>\n                    </p>\n                    <p className={el.change > 0 ? \"data-increase increase\" : \"data-decrease decrease\"}><small>{el.change}%</small></p>\n                  </div>\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\" >\n                  <div className=\"data\">\n                    <p className=\"coin-data\" sm={6}>\n                      <span>Market Cap</span> <span>{(el.marketCap).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoCoins.base.symbol,\n                      })}</span>\n                    </p>\n                    <p className=\"coin-data\" >\n                      <span>Volume <span>(24h)</span></span>  <span>{(el.volume).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoCoins.base.symbol,\n                      })}</span>\n                    </p>\n                    <p className=\"coin-data\">\n                      <span>Circulating Supply</span> <span>{(Number(el.circulatingSupply)).toLocaleString('en-US')} {el.symbol}</span>\n                    </p>\n                  </div>\n                  <section className=\"history\">\n                    <Line\n                      data={graphData}\n                      options={{\n                        title:{\n                          display:true,\n                          text:'Average Rainfall per month',\n                          fontSize:20\n                        },\n                        legend:{\n                          display:true,\n                          position:'right'\n                        }\n                      }}\n                    />\n                  </section>\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n            <CardActions>\n              <Link to={{\n                  pathname: `/currency/${el.name}`,\n                  state: {coinId: el.id}\n                }} size=\"small\" color=\"primary\">Learn More</Link>\n            </CardActions>\n          </Card>\n        </Grid>\n      )\n      }))}\n      {cryptoCoins &&  <ul className=\"pageNumbers\">{pageNumber}</ul>}\n\n    </>\n  );\n}\n\nexport default MediaCard","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Coins from './coinLists'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    margin: '15px'\n  }\n}));\n\nexport default function FullWidthGrid() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n          <Coins/>\n      </Grid>\n    </div>\n  );\n}\n","import {useSelector} from 'react-redux'\nimport { useLocation } from 'react-router'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport {Line} from 'react-chartjs-2';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexDirection: 'column',\n    flexGrow: 1,\n    margin: '15px'\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n\n\nexport default function SingleCrypto() {\n  const classes = useStyles();\n\n   const location = useLocation()\n   const coinId = location.state.coinId\n  \n  const cryptoCoins = useSelector(state => state.cryptos.cryptoData.data)\n\n  // get SingleCoin\n  let coin,\n      graphData,\n      high,\n      desc,\n      low;\n\n  if (cryptoCoins !== undefined){\n    coin = cryptoCoins.coins.find(({id}) => id === coinId)\n\n    \n    const prices = coin.history.map(el => Number(el))\n    low = (Math.min(...prices).toLocaleString('en-US', {style: 'currency',currency: 'USD'}))\n    high = (Math.max(...prices).toLocaleString('en-US', {style: 'currency',currency: 'USD'}))\n\n    graphData = {\n      labels: [...Array(coin.history.length).keys()],\n      datasets: [\n        {\n          label: `${coin.name} Coin Chart`,\n          responsive: true,\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: coin.color,\n          pointRadius: 0,\n          pointBorderColor: coin.color,\n          padding: 0,\n          borderWidth: 2,\n          data: coin.history\n        }\n      ]\n    }\n    \n   \n\n// p.outerHTML = p.outerHTML.replace(/[><]['\"]+[><]/g, '');\n\n\n  }\n  // console.log(coin)\n  const handleClick = (e) => {\n    // console.log(e.target.innerHTML.replace(/[><]['\"]+[><]/g, ))\n  }\n \n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        {coin && (<> \n          <Grid item xs={5}>\n            <section>\n              <div className=\"coin-head\">\n                <Avatar aria-label=\"recipe\" className={classes.avatar} style={{backgroundColor: 'white'}}>\n                  <img src={coin.iconUrl} alt={coin.symbol} style={{width: `50px`, height: '50px'}}/>\n                </Avatar>\n                <div className=\"single-coin-names\">\n                  <h1><strong>{coin.name}</strong></h1>\n                  <h5>{coin.symbol}</h5>\n                </div>\n              </div>\n              \n              <div className=\"rank-type\">\n                <h4>Rank #{coin.rank}</h4>\n                <h4>{coin.type}</h4>\n              </div>\n\n              <div >\n                <ul className=\"links\">\n                 {coin.links.map(el => {\n                   return (\n                    <li key={el.name}>\n                    <a href={el.url} target=\"_blank\" rel=\"noReferrer\">{el.name}</a>\n                  </li>\n                   )\n                 })}\n                  \n                </ul>\n\n              </div>\n              </section>\n          </Grid>\n\n          <Grid item xs={7}>\n            <section>\n              <div>\n                <p style={{marginBottom: '0'}}><small>{coin.name} Price ({coin.symbol})</small></p>\n                <div className=\"coin-price\">\n                  <h1 style={{marginTop: '0'}}>{(Number(coin.price)).toLocaleString('en-US', {\n                          style: 'currency',\n                          currency: 'USD',\n                        })}\n                  </h1>\n                  <h1 className={coin.change > 0 ? \"increase\" : \"decrease\"}>{coin.change}%</h1>\n                </div>\n                <div className=\"low-high\">\n                  <p><span>Low: <span><strong>{low}</strong></span></span></p>\n                  <p><span>High: <span><strong>{high}</strong></span></span></p>\n                </div>\n                \n              </div>\n\n            <div>\n              <h1>{coin.symbol} Price Statistics</h1>\n              <div className=\"coin-statistics\">\n\n                <div className=\"coin-stats-value\">\n                  <p><small>Market Cap</small></p>\n                  <p className=\"figures\"><small><strong>{(coin.marketCap).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoCoins.base.symbol,\n                      })}</strong></small></p>\n                </div>\n\n                <div className=\"coin-stats-value\">\n                  <p><small>Volume 24h</small></p>\n                  <p className=\"figures\">\n                    <small>\n                      <strong>{(coin.volume).toLocaleString('en-US', {\n                          style: 'currency',\n                          currency: cryptoCoins.base.symbol,\n                        })}\n                      </strong>\n                    </small>\n                  </p>\n                  <p><small>Volume / Market Cap</small></p>\n                  <p className=\"figures\"><small><strong>{parseFloat((coin.volume/coin.marketCap).toFixed(5))}</strong></small></p>\n                </div>\n\n                <div className=\"coin-stats-value\">\n                  <p><small>Circulating Supply</small></p>\n                  <p className=\"figures\">\n                    <small>\n                      <strong>{(coin.volume).toLocaleString('en-US')} {coin.symbol}</strong>\n                    </small>\n                  </p>\n                  <p><small>Total Supply</small></p>\n                  <p className=\"figures\"><small><strong>{(coin.totalSupply).toLocaleString('en-US')}</strong></small></p>\n                </div>\n              </div>\n            </div>\n            </section>\n            \n          </Grid>\n          <section className=\"other-data\" >\n            <div className=\"coin-graph\">\n              {/* {coin.description} */}\n              <Line\n                      data={graphData}\n                      options={{\n                        title:{\n                          display:true,\n                          text:'Average Rainfall per month',\n                          fontSize:20\n                        },\n                        legend:{\n                          display:true,\n                          position:'right'\n                        }\n                      }}\n                    />\n\n            </div>\n            <div className=\"description\">\n            </div>\n          </section>\n        </>)}\n      </Grid>\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {createSlice} from '@reduxjs/toolkit'\n\n// initialize the state\n\nconst initialState = {\n    cryptoData: {}\n}\n\nconst cryptoSlice = createSlice({\n    name: 'cyptos',\n    initialState: initialState,\n    reducers: {\n        addCryptos(state, action){\n            state.cryptoData = action.payload.cryptoCoins\n            // console.log(state.cryptoData)\n        }\n    }\n})\n\nexport default cryptoSlice.reducer \nexport const cryptoActions = cryptoSlice.actions","\nimport React from 'react';\nimport {useSelector} from 'react-redux'\n\n\n\nexport default function SubNav() {\n\n    // get the coin to retrieve cumulative data\n    const cryptoSummary = useSelector(state => state.cryptos.cryptoData.data)\n\n    return (\n        <div className=\"sub-nav\">\n            {!cryptoSummary && (<small></small>)}\n            { cryptoSummary && (<div className=\"stats\">\n                    <p>\n                        <span>Cryptos: </span>\n                        <span className=\"stat-data\">{cryptoSummary.stats.limit}</span>\n                    </p>\n                    <p>\n                        <span>Exchanges: </span>\n                        <span className=\"stat-data\">{cryptoSummary.stats.totalExchanges}</span>\n                    </p>\n                    <p>\n                        <span>Market Cap: </span>\n                        <span className=\"stat-data\">{(cryptoSummary.stats.totalMarketCap).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoSummary.stats.base,\n                      })}</span>\n                    </p>\n                    <p>\n                        <span>24h Vol: </span>\n                        <span className=\"stat-data\">{(cryptoSummary.stats.total24hVolume).toLocaleString('en-US', {\n                        style: 'currency',\n                        currency: cryptoSummary.stats.base,\n                      })}</span>\n                    </p>\n                    <p>\n                        <span className=\"sign\">{cryptoSummary.base.sign}</span>\n                        <span><strong>{cryptoSummary.base.symbol}</strong></span>\n                    </p>\n                </div>)\n            }\n\n      </div>\n    );\n}\n","\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Link} from \"react-router-dom\";\nimport Typography from '@material-ui/core/Typography';\nimport SubNav from './subNav'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > * + *': {\n      marginLeft: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <header>\n      <SubNav/>\n      <nav>\n        <Typography className={classes.root}>\n        <Link to={{\n                pathname: '/',\n                }} size=\"small\" color=\"primary\">Home</Link>\n        </Typography>\n\n      </nav>\n    </header>\n      \n  );\n}\n","import axios from 'axios'\nimport {useEffect} from 'react'\nimport {useDispatch} from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport './App.css';\nimport Home from './components/home'\nimport Coin from './components/singleCrypto'\nimport {cryptoActions} from './store/cryptoSlice'\nimport Header from './components/header'\n\n\nfunction App() {\n\n  const dispatch = useDispatch()\n\n\n  const options = {\n    method: 'GET',\n    param: 'coins',\n    url: 'https://coinranking1.p.rapidapi.com/coins',\n    headers: {\n      'x-rapidapi-key': '74a217fafcmsh976e97a31530a44p1f4bd1jsne0efc121be88',\n      'x-rapidapi-host': 'coinranking1.p.rapidapi.com'\n    }\n  };\n  \n  useEffect(() => {\n    axios.request(options).then(function (response) {\n      dispatch(cryptoActions.addCryptos({\n        cryptoCoins: response.data\n      }))\n\n    }).catch(function (error) {\n      console.error(error);\n    });\n    return () => {\n      \n    }\n  })\n  \n\n\n  return (\n    <>\n    <Router>\n      <Header/>\n      <Switch>\n        <Route path=\"/\"  exact component={Home}/>\n        <Route path=\"/currency/\"  component={Coin} />\n      </Switch>\n    </Router>\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {configureStore} from \"@reduxjs/toolkit\"\n\nimport cryptoReducer from \"./cryptoSlice\"\n\nconst store = configureStore({\n    reducer: {\n        cryptos: cryptoReducer\n    }\n})\n\n\n\nexport default store;","import React from 'react';\nimport {Provider} from 'react-redux'\nimport {BrowserRouter} from 'react-router-dom'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}><App/></Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}